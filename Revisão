CREATE DATABASE tb_4bim_makima_nome_certo_que_eu_tinha_esquecido_Felipe_lira;
USE tb_4bim_makima_nome_certo_que_eu_tinha_esquecido_Felipe_lira;

-- 1

-- A)
CREATE TABLE nomes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255)
);
INSERT INTO nomes (nome) VALUES
    ('Roberta'),
    ('Roberto'),
    ('Maria Clara'),
    ('João')
;

-- B)
SELECT nome, UPPER(nome) AS transformado_em_maiusculo FROM nomes;

-- C)
SELECT nome, LENGTH(nome) AS tamanho_nome FROM nomes;

-- D)
-- Selecionar nomes com tratamento adequado
SELECT 
    CASE 
        WHEN nome LIKE '%Roberto%' OR nome LIKE '%João%' THEN CONCAT('Sr. ', nome)
        WHEN nome LIKE '%Roberta%' OR nome LIKE '%Maria Clara%' THEN CONCAT('Sra. ', nome)
        ELSE nome
    END AS nome_com_tratamento
FROM nomes;

-- 2

-- A)
CREATE TABLE produtos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    produto VARCHAR(255) NOT NULL,
    preco DECIMAL(10, 2) NOT NULL,
    quantidade INT NOT NULL
);

INSERT INTO produtos (produto, preco, quantidade)
VALUES
	('Relampago Marquinhos', '5.99', '2'),
    ('Arma de fogo (sem fogo e sem arma)', '19.99', '1')
;

-- B)
SELECT produto, ROUND(preco, 2) AS preco_arredondado, quantidade
FROM produtos;

-- C)
SELECT produto, preco, ABS(quantidade) AS quantidade_absoluta
FROM produtos;

-- D)
SELECT AVG(preco) AS media_precos
FROM produtos;

-- 3

-- A)
CREATE TABLE eventos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    data_evento DATETIME
);

INSERT INTO eventos (data_evento) VALUES
('2018-10-01 10:10:10'),
('2068-09-05 10:03:00'),
('2098-05-03 09:09:09'),
('2100-12-02 13:12:59'),
('2024-02-10 00:00:00')
;

-- B)
INSERT INTO eventos (data_evento)
SELECT NOW() as DatAtual;

-- C)
SELECT data_evento, data_evento AS data_atual, DATEDIFF(NOW(), data_evento) AS Comparação_total
FROM eventos;

-- D)
SELECT DAYNAME(data_evento) AS nome_dia_semana
FROM eventos;

-- 4

-- A)
INSERT INTO produtos(produto, preco, quantidade) VALUES
('Gás', '180.00', 10),
('Gazua', '30.99', 0),
('Doce de Murango', '12.50', 12);

SELECT produto, preco, quantidade,
       IF(quantidade > 0, 'Em estoque', 'Fora de estoque') AS status_estoque
FROM produtos;

-- B)
SELECT produto, preco, quantidade,
    CASE
        WHEN preco <= 3.00 THEN 'Barato'
        WHEN preco <= 6.00 THEN 'Médio'
        ELSE 'Caro'
    END AS categoria_preco
FROM produtos;


-- 5

-- A)
DELIMITER //
CREATE FUNCTION TOTAL_VALOR (quantidade INT, preco DECIMAL(10, 2))
RETURNS DECIMAL(10, 2)
DETERMINISTIC
BEGIN
	DECLARE total DECIMAL(10, 2);
	SET total = quantidade * preco;
	RETURN total;
END 
//
DELIMITER;

-- B)
SELECT produto, preco, quantidade, TOTAL_VALOR(preco, quantidade) AS valor_total
FROM produtos;


--  6

-- A)
SELECT COUNT(produto) as Estoque_de_todos_os_produtos FROM produtos;

-- B)
SELECT MAX(preco) FROM produtos;

-- C)
SELECT MIN(preco) FROM produtos;

-- D)
SELECT SUM(IF(quantidade > 0, preco * quantidade, 0)) AS total_em_estoque
FROM produtos;













